{"version":3,"sources":["../src/index.js"],"names":["mongoDB","process","env","MONGO_DB_PW","mongoose","connect","useUnifiedTopology","useNewUrlParser","db","connection","on","console","error","bind","LocalStrategy","local","Strategy","passport","use","username","password","done","User","findOne","err","user","msg","bcrypt","compare","res","serializeUser","id","deserializeUser","findById","whitelist","corsOptions","origin","callback","indexOf","Error","app","req","next","header","express","json","secret","resave","saveUninitialized","initialize","session","urlencoded","extended","instaPhoto","context","photos","locals","currentUser","routes","instaPhotos","listen","PORT","log"],"mappings":"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","sourcesContent":["import 'dotenv/config';\nimport express from 'express';\nimport path from 'path';\nimport session from 'express-session';\nimport passport from 'passport';\nimport local from 'passport-local';\nimport mongoose from 'mongoose';\nimport cors from 'cors';\nimport { v4 as uuidv4 } from 'uuid';\n//import models from './models';\nimport routes from './routes';\nimport instaPhoto from './models/instaPhoto';\nimport User from './models/user';\nimport bcrypt from 'bcryptjs';\n\n// Setup connection to MongoDB\nconst mongoDB = `mongodb+srv://akoenig1:${process.env.MONGO_DB_PW}@cluster0.hhgkn.mongodb.net/<dbname>?retryWrites=true&w=majority`;\nmongoose.connect(mongoDB, { useUnifiedTopology: true, useNewUrlParser: true });\nconst db = mongoose.connection;\ndb.on('error', console.error.bind(console, 'Mongo Connection Error'));\n\n// Setup Local Strategy\nconst LocalStrategy = local.Strategy;\npassport.use(\n    new LocalStrategy((username, password, done) => {\n        User.findOne( {username: username }, (err, user) => {\n            if(err) {\n                return done(err);\n            };\n            if(!user) {\n                return done(null, false, {msg: 'Username does not exist'});\n            }\n            bcrypt.compare(password, user.password, (err, res) => {\n                if(res) {\n                    // passwords match so log user in\n                    return done(null, user);\n                }\n                else {\n                    // passwords do not match\n                    return done(null, false, { msg: 'Incorrect password' });\n                }\n            });\n        });\n    })\n);\n\npassport.serializeUser(function(user, done) {\n    done(null, user.id);\n});\n\npassport.deserializeUser(function(id, done) {\n    User.findById(id, function(err, user) {\n        done(err, user);\n    });\n});\n\n// Setup CORS white list\nvar whitelist = ['http://www.cookingsousviv.com/'];\nvar corsOptions = {\n    origin: function(origin, callback) {\n        if(whitelist.indexOf(origin) !== -1) {\n            callback(null, true);\n        } else {\n            callback(new Error('Not allowed by CORS'))\n        }\n    }\n}\n\nconst app = express();\n\n// Imported middleware //\napp.use(function(req, res, next) {\n    res.header(\"Access-Control-Allow-Origin\", '*');\n    res.header(\"Access-Control-Allow-Credentials\", true);\n    res.header('Access-Control-Allow-Methods', 'GET,PUT,POST,DELETE,OPTIONS');\n    res.header(\"Access-Control-Allow-Headers\", 'Origin,X-Requested-With,Content-Type,Accept,content-type,application/json');\n    next();\n});\napp.use(cors());\napp.use(express.json());\napp.use(session({ secret: 'cats', resave: false, saveUninitialized: true }));\napp.use(passport.initialize());\napp.use(passport.session());\napp.use(express.urlencoded({ extended: true }));\n\n// Custom middleware //\n// Wait for response from Instagram API requested in instaPhotos model\napp.use( async (req, res, next) => {\n    req.context = {\n        photos: await instaPhoto,\n    };\n    next();\n});\n\n// Access current user in all views/controllers\napp.use(function(req, res, next) {\n    res.locals.currentUser = req.user;\n    next();\n})\n\n// Router middleware //\napp.use('/instaPhotos', routes.instaPhotos);\n\n// Run server //\napp.listen(process.env.PORT, () => {\n    console.log(`Listening on port ${process.env.PORT}`);\n});"],"file":"index.js"}