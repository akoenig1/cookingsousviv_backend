{"version":3,"sources":["../src/index.js"],"names":["mongoDB","keys","MONGO_DB_URI","mongoose","connect","useUnifiedTopology","useNewUrlParser","useFindAndModify","db","connection","on","console","error","bind","whitelist","corsOptions","origin","callback","indexOf","Error","app","use","express","json","urlencoded","extended","req","res","next","header","secret","KEYS","SESSION_SECRET","resave","saveUninitialized","cookie","secure","passport","initialize","session","cron","schedule","routes","auth","instaPhotos","recipes","listen","process","env","PORT","log"],"mappings":"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","sourcesContent":["import 'dotenv/config';\nimport 'core-js/stable';\nimport 'regenerator-runtime/runtime';\nimport express from 'express';\nimport path from 'path';\nimport session from 'express-session';\nimport passport from 'passport';\nimport passportSetup from './config/passport-setup';\nimport cookieParser from 'cookie-parser'\nimport keys from './config/keys'\nimport mongoose from 'mongoose';\nimport cors from 'cors';\nimport { v4 as uuidv4 } from 'uuid';\nimport routes from './routes';\nimport updateInstaPhotos from './helpers/updateInstaPhotos';\nimport cron from 'node-cron';\nimport KEYS from './config/keys'\n\n// Setup connection to MongoDB\nconst mongoDB = keys.MONGO_DB_URI\nmongoose.connect(mongoDB, { useUnifiedTopology: true, useNewUrlParser: true, useFindAndModify: false });\nconst db = mongoose.connection;\ndb.on('error', console.error.bind(console, 'Mongo Connection Error'));\n\n// Setup CORS white list\nvar whitelist = ['http://www.cookingsousviv.com/'];\nvar corsOptions = {\n    origin: function(origin, callback) {\n        if(whitelist.indexOf(origin) !== -1) {\n            callback(null, true);\n        } else {\n            callback(new Error('Not allowed by CORS'))\n        }\n    }\n}\n\nconst app = express();\n\n\n// Imported middleware //\n// Express setup\napp.use(express.json());\napp.use(express.urlencoded({ extended: true }));\napp.use(cookieParser());\n\n// CORS Setup\napp.use(function(req, res, next) {\n    res.header(\"Access-Control-Allow-Origin\", '*');\n    res.header(\"Access-Control-Allow-Credentials\", true);\n    res.header('Access-Control-Allow-Methods', 'GET,PUT,POST,DELETE,OPTIONS');\n    res.header(\"Access-Control-Allow-Headers\", 'Origin,X-Requested-With,Content-Type,Accept,Authorization,content-type,application/json');\n    next();\n});\napp.use(cors());\n\n// Passport Setup\napp.use(session({ \n    secret: KEYS.SESSION_SECRET, \n    resave: true, \n    saveUninitialized: true,\n    cookie: {\n        secure: false\n    }\n}));\napp.use(passport.initialize());\napp.use(passport.session());\n\n\n// Custom middleware //\n// Check for new instagram photos every 15 minutes\napp.use(async function(req, res, next) {\n    cron.schedule('*/15 * * * *', await updateInstaPhotos(req, res, next) )\n    next();\n});\n\n\n// Router middleware //\napp.use('/auth', routes.auth);\napp.use('/instaPhotos', routes.instaPhotos);\napp.use('/recipes', routes.recipes);\n\n\n// Run server //\napp.listen(process.env.PORT, () => {\n    console.log(`Listening on port ${process.env.PORT}`);\n});"],"file":"index.js"}