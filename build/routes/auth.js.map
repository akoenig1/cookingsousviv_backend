{"version":3,"sources":["../../src/routes/auth.js"],"names":["router","get","authController","login_failed","logout","google_auth","passport","authenticate","failureRedirect","session","req","res","logIn","user","err","console","log","token","jwt","sign","id","process","env","JWT_SECRET","expiresIn","header","redirect","KEYS","HOME_PAGE_URL"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;AAEA,IAAMA,MAAM,GAAG,sBAAf;AAEAA,MAAM,CAACC,GAAP,CAAW,eAAX,EAA4BC,2BAAeC,YAA3C;AAEAH,MAAM,CAACC,GAAP,CAAW,SAAX,EAAsBC,2BAAeE,MAArC;AAEAJ,MAAM,CAACC,GAAP,CAAW,SAAX,EAAsBC,2BAAeG,WAArC;AAEAL,MAAM,CAACC,GAAP,CAAW,kBAAX,EAA+BK,qBAASC,YAAT,CAAsB,QAAtB,EAC3B;AACIC,EAAAA,eAAe,EAAE,oBADrB;AAEIC,EAAAA,OAAO,EAAE;AAFb,CAD2B,CAA/B,EAKO,UAACC,GAAD,EAAMC,GAAN,EAAc;AACbD,EAAAA,GAAG,CAACE,KAAJ,CAAUF,GAAG,CAACG,IAAd,EAAoB,UAACC,GAAD,EAAS;AACzB,QAAGA,GAAH,EAAQ;AACJC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACH,KAFD,MAEO;AACH,UAAI;AACA,YAAIG,KAAK,GAAGC,yBAAIC,IAAJ,CACR;AAACC,UAAAA,EAAE,EAAEV,GAAG,CAACG,IAAJ,CAASO;AAAd,SADQ,EAERC,OAAO,CAACC,GAAR,CAAYC,UAFJ,EAGR;AAACC,UAAAA,SAAS,EAAE;AAAZ,SAHQ,CAAZ;;AAKAb,QAAAA,GAAG,CAACc,MAAJ,CAAW,eAAX,EAA4BR,KAA5B,EAAmCS,QAAnC,WAA+CC,iBAAKC,aAApD;AACH,OAPD,CAOE,OAAMd,GAAN,EAAW;AACTC,QAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACH;AACJ;AACJ,GAfD;AAgBH,CAtBL;eAyBed,M","sourcesContent":["import \"dotenv/config\"\nimport { Router } from  'express'\nimport jwt from 'jsonwebtoken'\nimport authController from \"../controllers/authController\"\nimport passport from \"passport\"\nimport KEYS from \"../config/keys\"\n\nconst router = Router();\n\nrouter.get('/login/failed', authController.login_failed)\n\nrouter.get('/logout', authController.logout)\n\nrouter.get('/google', authController.google_auth)\n\nrouter.get('/google/redirect', passport.authenticate(\"google\", \n    {\n        failureRedirect: '/auth/login/failed',\n        session: false \n    }\n    ), (req, res) => {\n        req.logIn(req.user, (err) => {\n            if(err) {\n                console.log(err)\n            } else {\n                try {\n                    let token = jwt.sign(\n                        {id: req.user.id}, \n                        process.env.JWT_SECRET, \n                        {expiresIn: '1h'}\n                    )\n                    res.header('Authorization', token).redirect(`${KEYS.HOME_PAGE_URL}`)\n                } catch(err) {\n                    console.log(err);\n                } \n            }\n        })\n    }\n)\n\nexport default router;"],"file":"auth.js"}